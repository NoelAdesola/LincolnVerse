{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Backend API service\nconst API = axios.create({\n  baseURL: 'http://localhost:5000',\n  withCredentials: true // Allows session-based authentication\n});\n\n// Authentication endpoints\nexport const registerUser = userData => API.post('/auth/register', userData);\nexport const loginUser = userData => API.post('/auth/login', userData);\nexport const logoutUser = () => API.post('/auth/logout');\nexport const sendResetLink = payload => API.post('/auth/forgot-password', payload);\nexport const resetPasswordConfirm = payload => API.post('/auth/reset-password-confirm', payload);\n\n// User profile endpoints\nexport const getUserProfile = () => API.get('/user/profile');\nexport const updateUserProfile = profileData => API.put('/user/profile', profileData);\n\n// Favorites endpoints\nexport const getFavorites = () => API.get('/favorites');\nexport const addFavorite = media => API.post('/favorites', media);\nexport const removeFavorite = id => API.delete(`/favorites/${id}`);\n\n// Search history endpoints\nexport const saveSearch = (query, filters = {}) => API.post('/search/save', {\n  query,\n  filters\n});\nexport const getSearchHistory = () => API.get('/search/history');\nexport const getRecentSearches = () => API.get('/search/recent');\nexport const deleteSearch = id => API.delete(`/search/${id}`);\n\n// Openverse API service\nconst OPENVERSE_API = axios.create({\n  baseURL: 'https://api.openverse.org/v1',\n  headers: {\n    'Accept': 'application/json'\n  }\n});\n\n// Openverse search & details\nexport const searchMedia = (query, mediaType = 'images', page = 1, perPage = 20, filters = {}) => {\n  const params = {\n    q: query,\n    page,\n    page_size: perPage,\n    ...filters\n  };\n  return OPENVERSE_API.get(`/${mediaType}/`, {\n    params\n  });\n};\nexport const getMediaDetails = (mediaType, id) => OPENVERSE_API.get(`/${mediaType}/${id}/`);\n\n// Handle global authentication errors\nAPI.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Authentication error, please log in again.');\n    // Optionally, dispatch logout or redirect here\n  }\n  return Promise.reject(error);\n});\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","withCredentials","registerUser","userData","post","loginUser","logoutUser","sendResetLink","payload","resetPasswordConfirm","getUserProfile","get","updateUserProfile","profileData","put","getFavorites","addFavorite","media","removeFavorite","id","delete","saveSearch","query","filters","getSearchHistory","getRecentSearches","deleteSearch","OPENVERSE_API","headers","searchMedia","mediaType","page","perPage","params","q","page_size","getMediaDetails","interceptors","response","use","error","_error$response","status","console","log","Promise","reject"],"sources":["C:/users/pc/desktop/se project/mediafinder/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Backend API service\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  withCredentials: true // Allows session-based authentication\r\n});\r\n\r\n// Authentication endpoints\r\nexport const registerUser           = (userData)                    => API.post('/auth/register', userData);\r\nexport const loginUser              = (userData)                    => API.post('/auth/login', userData);\r\nexport const logoutUser             = ()                            => API.post('/auth/logout');\r\nexport const sendResetLink          = (payload)                     => API.post('/auth/forgot-password', payload);\r\nexport const resetPasswordConfirm   = (payload)                     => API.post('/auth/reset-password-confirm', payload);\r\n\r\n// User profile endpoints\r\nexport const getUserProfile         = ()                            => API.get('/user/profile');\r\nexport const updateUserProfile      = (profileData)                 => API.put('/user/profile', profileData);\r\n\r\n// Favorites endpoints\r\nexport const getFavorites           = ()                            => API.get('/favorites');\r\nexport const addFavorite            = (media)                       => API.post('/favorites', media);\r\nexport const removeFavorite         = (id)                          => API.delete(`/favorites/${id}`);\r\n\r\n// Search history endpoints\r\nexport const saveSearch             = (query, filters = {})         => API.post('/search/save', { query, filters });\r\nexport const getSearchHistory       = ()                            => API.get('/search/history');\r\nexport const getRecentSearches      = ()                            => API.get('/search/recent');\r\nexport const deleteSearch           = (id)                          => API.delete(`/search/${id}`);\r\n\r\n// Openverse API service\r\nconst OPENVERSE_API = axios.create({\r\n  baseURL: 'https://api.openverse.org/v1',\r\n  headers: { 'Accept': 'application/json' }\r\n});\r\n\r\n// Openverse search & details\r\nexport const searchMedia            = (query, mediaType = 'images', page = 1, perPage = 20, filters = {}) => {\r\n  const params = { q: query, page, page_size: perPage, ...filters };\r\n  return OPENVERSE_API.get(`/${mediaType}/`, { params });\r\n};\r\nexport const getMediaDetails        = (mediaType, id)             => OPENVERSE_API.get(`/${mediaType}/${id}/`);\r\n\r\n// Handle global authentication errors\r\nAPI.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      console.log('Authentication error, please log in again.');\r\n      // Optionally, dispatch logout or redirect here\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default API;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAcC,QAAQ,IAAwBL,GAAG,CAACM,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;AAC3G,OAAO,MAAME,SAAS,GAAiBF,QAAQ,IAAwBL,GAAG,CAACM,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACxG,OAAO,MAAMG,UAAU,GAAeA,CAAA,KAAiCR,GAAG,CAACM,IAAI,CAAC,cAAc,CAAC;AAC/F,OAAO,MAAMG,aAAa,GAAaC,OAAO,IAAyBV,GAAG,CAACM,IAAI,CAAC,uBAAuB,EAAEI,OAAO,CAAC;AACjH,OAAO,MAAMC,oBAAoB,GAAMD,OAAO,IAAyBV,GAAG,CAACM,IAAI,CAAC,8BAA8B,EAAEI,OAAO,CAAC;;AAExH;AACA,OAAO,MAAME,cAAc,GAAWA,CAAA,KAAiCZ,GAAG,CAACa,GAAG,CAAC,eAAe,CAAC;AAC/F,OAAO,MAAMC,iBAAiB,GAASC,WAAW,IAAqBf,GAAG,CAACgB,GAAG,CAAC,eAAe,EAAED,WAAW,CAAC;;AAE5G;AACA,OAAO,MAAME,YAAY,GAAaA,CAAA,KAAiCjB,GAAG,CAACa,GAAG,CAAC,YAAY,CAAC;AAC5F,OAAO,MAAMK,WAAW,GAAeC,KAAK,IAA2BnB,GAAG,CAACM,IAAI,CAAC,YAAY,EAAEa,KAAK,CAAC;AACpG,OAAO,MAAMC,cAAc,GAAYC,EAAE,IAA8BrB,GAAG,CAACsB,MAAM,CAAC,cAAcD,EAAE,EAAE,CAAC;;AAErG;AACA,OAAO,MAAME,UAAU,GAAeA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAazB,GAAG,CAACM,IAAI,CAAC,cAAc,EAAE;EAAEkB,KAAK;EAAEC;AAAQ,CAAC,CAAC;AACnH,OAAO,MAAMC,gBAAgB,GAASA,CAAA,KAAiC1B,GAAG,CAACa,GAAG,CAAC,iBAAiB,CAAC;AACjG,OAAO,MAAMc,iBAAiB,GAAQA,CAAA,KAAiC3B,GAAG,CAACa,GAAG,CAAC,gBAAgB,CAAC;AAChG,OAAO,MAAMe,YAAY,GAAcP,EAAE,IAA8BrB,GAAG,CAACsB,MAAM,CAAC,WAAWD,EAAE,EAAE,CAAC;;AAElG;AACA,MAAMQ,aAAa,GAAG9B,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,8BAA8B;EACvC4B,OAAO,EAAE;IAAE,QAAQ,EAAE;EAAmB;AAC1C,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAcA,CAACP,KAAK,EAAEQ,SAAS,GAAG,QAAQ,EAAEC,IAAI,GAAG,CAAC,EAAEC,OAAO,GAAG,EAAE,EAAET,OAAO,GAAG,CAAC,CAAC,KAAK;EAC3G,MAAMU,MAAM,GAAG;IAAEC,CAAC,EAAEZ,KAAK;IAAES,IAAI;IAAEI,SAAS,EAAEH,OAAO;IAAE,GAAGT;EAAQ,CAAC;EACjE,OAAOI,aAAa,CAAChB,GAAG,CAAC,IAAImB,SAAS,GAAG,EAAE;IAAEG;EAAO,CAAC,CAAC;AACxD,CAAC;AACD,OAAO,MAAMG,eAAe,GAAUA,CAACN,SAAS,EAAEX,EAAE,KAAiBQ,aAAa,CAAChB,GAAG,CAAC,IAAImB,SAAS,IAAIX,EAAE,GAAG,CAAC;;AAE9G;AACArB,GAAG,CAACuC,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3BD,QAAQ,IAAIA,QAAQ,EACpBE,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzD;EACF;EACA,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAe1C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}