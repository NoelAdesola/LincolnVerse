{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Backend API service\nconst API = axios.create({\n  baseURL: 'http://localhost:5000',\n  withCredentials: true // Allows session-based authentication\n});\n\n// Authentication API\nexport const registerUser = userData => API.post('/auth/register', userData);\nexport const loginUser = userData => API.post('/auth/login', userData);\nexport const logoutUser = () => API.post('/auth/logout');\n// Forgot password (send reset link)\nexport const sendResetLink = payload => API.post('/auth/forgot-password', payload);\n\n// Openverse API service\nconst OPENVERSE_API = axios.create({\n  baseURL: 'https://api.openverse.org/v1',\n  headers: {\n    'Accept': 'application/json'\n  }\n});\n\n// Search API\nexport const searchMedia = (query, mediaType = 'images', page = 1, perPage = 20, filters = {}) => {\n  // Construct the query parameters\n  const params = {\n    q: query,\n    page,\n    page_size: perPage,\n    ...filters\n  };\n\n  // Make the API request to the appropriate endpoint based on media type\n  return OPENVERSE_API.get(`/${mediaType}/`, {\n    params\n  });\n};\n\n// Get specific media details\nexport const getMediaDetails = (mediaType, id) => {\n  return OPENVERSE_API.get(`/${mediaType}/${id}/`);\n};\n\n// User search history\nexport const saveSearch = (query, filters = {}) => API.post('/search/save', {\n  query,\n  filters\n});\nexport const getRecentSearches = () => API.get('/search/recent');\nexport const deleteSearch = id => API.delete(`/search/${id}`);\n\n// Handle interceptors for authentication errors\nAPI.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Handle unauthorized access - could redirect to login\n    console.log('Authentication error');\n  }\n  return Promise.reject(error);\n});\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","withCredentials","registerUser","userData","post","loginUser","logoutUser","sendResetLink","payload","OPENVERSE_API","headers","searchMedia","query","mediaType","page","perPage","filters","params","q","page_size","get","getMediaDetails","id","saveSearch","getRecentSearches","deleteSearch","delete","interceptors","response","use","error","status","console","log","Promise","reject"],"sources":["C:/users/pc/desktop/SE Project/MediaFinder/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Backend API service\r\nconst API = axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    withCredentials: true // Allows session-based authentication\r\n});\r\n\r\n// Authentication API\r\nexport const registerUser = (userData) => API.post('/auth/register', userData);\r\nexport const loginUser = (userData) => API.post('/auth/login', userData);\r\nexport const logoutUser = () => API.post('/auth/logout');\r\n// Forgot password (send reset link)\r\nexport const sendResetLink = (payload) => API.post('/auth/forgot-password', payload);\r\n\r\n// Openverse API service\r\nconst OPENVERSE_API = axios.create({\r\n    baseURL: 'https://api.openverse.org/v1',\r\n    headers: {\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Search API\r\nexport const searchMedia = (query, mediaType = 'images', page = 1, perPage = 20, filters = {}) => {\r\n    // Construct the query parameters\r\n    const params = {\r\n        q: query,\r\n        page,\r\n        page_size: perPage,\r\n        ...filters\r\n    };\r\n    \r\n    // Make the API request to the appropriate endpoint based on media type\r\n    return OPENVERSE_API.get(`/${mediaType}/`, { params });\r\n};\r\n\r\n// Get specific media details\r\nexport const getMediaDetails = (mediaType, id) => {\r\n    return OPENVERSE_API.get(`/${mediaType}/${id}/`);\r\n};\r\n\r\n// User search history\r\nexport const saveSearch = (query, filters = {}) => \r\n    API.post('/search/save', { query, filters });\r\n\r\nexport const getRecentSearches = () => \r\n    API.get('/search/recent');\r\n\r\nexport const deleteSearch = (id) => \r\n    API.delete(`/search/${id}`);\r\n\r\n// Handle interceptors for authentication errors\r\nAPI.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            // Handle unauthorized access - could redirect to login\r\n            console.log('Authentication error');\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default API;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAKL,GAAG,CAACM,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;AAC9E,OAAO,MAAME,SAAS,GAAIF,QAAQ,IAAKL,GAAG,CAACM,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACxE,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAMR,GAAG,CAACM,IAAI,CAAC,cAAc,CAAC;AACxD;AACA,OAAO,MAAMG,aAAa,GAAIC,OAAO,IAAKV,GAAG,CAACM,IAAI,CAAC,uBAAuB,EAAEI,OAAO,CAAC;;AAEpF;AACA,MAAMC,aAAa,GAAGZ,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAE,8BAA8B;EACvCU,OAAO,EAAE;IACL,QAAQ,EAAE;EACd;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,SAAS,GAAG,QAAQ,EAAEC,IAAI,GAAG,CAAC,EAAEC,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9F;EACA,MAAMC,MAAM,GAAG;IACXC,CAAC,EAAEN,KAAK;IACRE,IAAI;IACJK,SAAS,EAAEJ,OAAO;IAClB,GAAGC;EACP,CAAC;;EAED;EACA,OAAOP,aAAa,CAACW,GAAG,CAAC,IAAIP,SAAS,GAAG,EAAE;IAAEI;EAAO,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAGA,CAACR,SAAS,EAAES,EAAE,KAAK;EAC9C,OAAOb,aAAa,CAACW,GAAG,CAAC,IAAIP,SAAS,IAAIS,EAAE,GAAG,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACX,KAAK,EAAEI,OAAO,GAAG,CAAC,CAAC,KAC1ClB,GAAG,CAACM,IAAI,CAAC,cAAc,EAAE;EAAEQ,KAAK;EAAEI;AAAQ,CAAC,CAAC;AAEhD,OAAO,MAAMQ,iBAAiB,GAAGA,CAAA,KAC7B1B,GAAG,CAACsB,GAAG,CAAC,gBAAgB,CAAC;AAE7B,OAAO,MAAMK,YAAY,GAAIH,EAAE,IAC3BxB,GAAG,CAAC4B,MAAM,CAAC,WAAWJ,EAAE,EAAE,CAAC;;AAE/B;AACAxB,GAAG,CAAC6B,YAAY,CAACC,QAAQ,CAACC,GAAG,CACxBD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACP,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACjD;IACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACvC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}